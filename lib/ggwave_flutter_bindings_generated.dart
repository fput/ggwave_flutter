// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/ggwave_flutter.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class GgwaveFlutterBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  GgwaveFlutterBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  GgwaveFlutterBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// A very short-lived native function.
  ///
  /// For very short-lived functions, it is fine to call them on the main isolate.
  /// They will block the Dart execution while running the native function, so
  /// only do this for native functions which are guaranteed to be short-lived.
  int sum(
    int a,
    int b,
  ) {
    return _sum(
      a,
      b,
    );
  }

  late final _sumPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.IntPtr)>>(
          'sum');
  late final _sum = _sumPtr.asFunction<int Function(int, int)>();

  /// A longer lived native function, which occupies the thread calling it.
  ///
  /// Do not call these kind of native functions in the main isolate. They will
  /// block Dart execution. This will cause dropped frames in Flutter applications.
  /// Instead, call these native functions on a separate isolate.
  int sum_long_running(
    int a,
    int b,
  ) {
    return _sum_long_running(
      a,
      b,
    );
  }

  late final _sum_long_runningPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.IntPtr)>>(
          'sum_long_running');
  late final _sum_long_running =
      _sum_long_runningPtr.asFunction<int Function(int, int)>();

  void initNative() {
    return _initNative();
  }

  late final _initNativePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('initNative');
  late final _initNative = _initNativePtr.asFunction<void Function()>();

  void deinit() {
    return _deinit();
  }

  late final _deinitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('deinit');
  late final _deinit = _deinitPtr.asFunction<void Function()>();

  int convertDataToAudio(
    ffi.Pointer<ffi.Char> dataBuffer,
    int dataSize,
    ffi.Pointer<ffi.Pointer<ffi.Char>> out,
    int protocolID,
  ) {
    return _convertDataToAudio(
      dataBuffer,
      dataSize,
      out,
      protocolID,
    );
  }

  late final _convertDataToAudioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int)>>('convertDataToAudio');
  late final _convertDataToAudio = _convertDataToAudioPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int processCaptureData(
    ffi.Pointer<ffi.Char> dataBuffer,
    int dataSize,
    ffi.Pointer<ffi.Pointer<ffi.Char>> out,
  ) {
    return _processCaptureData(
      dataBuffer,
      dataSize,
      out,
    );
  }

  late final _processCaptureDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('processCaptureData');
  late final _processCaptureData = _processCaptureDataPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int processCaptureDataLocal(
    ffi.Pointer<ffi.Char> dataBuffer,
    int dataSize,
    ffi.Pointer<ffi.Pointer<ffi.Char>> out,
  ) {
    return _processCaptureDataLocal(
      dataBuffer,
      dataSize,
      out,
    );
  }

  late final _processCaptureDataLocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('processCaptureDataLocal');
  late final _processCaptureDataLocal = _processCaptureDataLocalPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int processCaptureDataLocalwithProtocols(
    ffi.Pointer<ffi.Char> protocolIDs,
    ffi.Pointer<ffi.Char> dataBuffer,
    int dataSize,
    ffi.Pointer<ffi.Pointer<ffi.Char>> out,
  ) {
    return _processCaptureDataLocalwithProtocols(
      protocolIDs,
      dataBuffer,
      dataSize,
      out,
    );
  }

  late final _processCaptureDataLocalwithProtocolsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
                  ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'processCaptureDataLocalwithProtocols');
  late final _processCaptureDataLocalwithProtocols =
      _processCaptureDataLocalwithProtocolsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  void setRxProtocolID(
    int protocolID,
  ) {
    return _setRxProtocolID(
      protocolID,
    );
  }

  late final _setRxProtocolIDPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'setRxProtocolID');
  late final _setRxProtocolID =
      _setRxProtocolIDPtr.asFunction<void Function(int)>();

  void setRxProtocolIDs(
    ffi.Pointer<ffi.Char> protocolIDa,
  ) {
    return _setRxProtocolIDs(
      protocolIDa,
    );
  }

  late final _setRxProtocolIDsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'setRxProtocolIDs');
  late final _setRxProtocolIDs =
      _setRxProtocolIDsPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();
}
